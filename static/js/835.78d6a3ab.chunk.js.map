{"version":3,"file":"static/js/835.78d6a3ab.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.jsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","utils/dateConverters.ts","components/Dialogs/Message/Message.tsx","redux/dialogs-selectors.ts","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsContent\":\"Dialogs_dialogsContent__IfR9A\",\"button\":\"Dialogs_button__bSNWQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogItem\":\"DialogItem_dialogItem__FvYQI\"};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styles from './DialogItem.module.css' ;\r\nimport { Avatar } from '../../common/Avatar/Avatar.tsx';\r\n\r\n\r\nexport const DialogItem = ({dialog}) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={`/dialogs/${dialog.id}`} className={styles.dialogItem} >\r\n                <Avatar width={30} photos={dialog.photos}/> \r\n                {dialog.userName}\r\n                {dialog.hasNewMessages && <sup>üì©</sup>}\r\n             </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n ","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__E3cvw\",\"myMessage\":\"Message_myMessage__yvjsn\",\"hisMessage\":\"Message_hisMessage__T4W7N\"};"," \r\nexport const dateConverter = (date: string): string => {\r\n\r\n    let day = (+   date.split('-')[2].split('T')[0]        )      %100;\r\n\r\n    let month = date.split('-')[1];\r\n    switch (month) {\r\n        case '01': month = '—è–Ω–≤–∞—Ä—è'; break;\r\n        case '02': month = '—Ñ–µ–≤—Ä–∞–ª—è'; break;\r\n        case '03': month = '–º–∞—Ä—Ç–∞'; break;\r\n        case '04': month = '–∞–ø—Ä–µ–ª—è'; break;\r\n        case '05': month = '–º–∞—è'; break;\r\n        case '06': month = '–∏—é–Ω—è'; break;\r\n        case '07': month = '–∏—é–ª—è'; break;\r\n        case '08': month = '–∞–≤–≥—É—Å—Ç–∞'; break;\r\n        case '09': month = '—Å–µ–Ω—Ç—è–±—Ä—è'; break;\r\n        case '10': month = '–æ–∫—Ç—è–±—Ä—è'; break;\r\n        case '11': month = '–Ω–æ—è–±—Ä—è'; break;\r\n        case '12': month = '–¥–µ–∫–∞–±—Ä—è'; break;\r\n        default: break;\r\n    };\r\n    let year = date.split('-')[0];\r\n\r\n    let newDate = day + ' ' + month + ' ' + year;\r\n    return newDate;\r\n}\r\n  \r\n","import React from 'react';\r\nimport { MessageType } from '../../../redux/dialogs-reducer';\r\nimport styles from './Message.module.css';\r\nimport { dateConverter } from '../../../utils/dateConverters.ts';\r\n\r\ntype Props = {\r\n    message: MessageType\r\n}\r\n\r\nexport const Message: React.FC<Props> = ({ message }) => {\r\n    console.log(message)\r\n    return (\r\n        <div className={styles.message}>\r\n            <span>{message.body} </span>\r\n            <span style={{ 'fontSize': 'smaller' }}>{dateConverter(message.addedAt)} </span>\r\n            {!message.viewed && <sup style={{color: 'red'}}>new</sup>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n","export const getDialogsState = (state) => {\r\n    return state.dialogsPage.dialogs\r\n}\r\nexport const getMessagesState = (state) => {\r\n    return state.dialogsPage.messages\r\n}\r\nexport const getNewMessageText = (state) => {\r\n    return state.dialogsPage.newMessageText\r\n}\r\n ","import React, { useEffect } from 'react';\r\n// @ts-ignore\r\nimport styles from './Dialogs.module.css';\r\nimport {DialogItem} from './DialogItem/DialogItem';\r\nimport {Message} from './Message/Message.tsx';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// @ts-ignore\r\nimport { actions } from '../../redux/dialogs-reducer.ts';\r\n// @ts-ignore\r\nimport { getIsAuth } from '../../redux/auth-selectors.ts';\r\n// @ts-ignore\r\nimport { getDialogsState, getMessagesState, getNewMessageText } from '../../redux/dialogs-selectors.ts';\r\n// @ts-ignore\r\nimport { getDialogs, getMessages, sendMessage, startDialog, DialogType, MessageType } from '../../redux/dialogs-reducer.ts';\r\n  \r\nconst Dialogs = React.memo(() => {\r\n     \r\n    const isAuth = useSelector(getIsAuth)\r\n    const dialogs: Array<DialogType>  = useSelector(getDialogsState)\r\n    const messages: Array<MessageType> = useSelector(getMessagesState)\r\n    const newMessageText: string = useSelector(getNewMessageText);\r\n         \r\n    const URLuserId = useParams().id;\r\n \r\n    const dispatch = useDispatch();\r\n    \r\n\r\n    useEffect( () => {\r\n        dispatch(getDialogs())\r\n        console.log('dialogs:', dialogs)\r\n        if (URLuserId) {dispatch(getMessages(URLuserId)) }\r\n    }, [])\r\n\r\n    useEffect( () => {\r\n        if (URLuserId) {\r\n            dispatch(startDialog(URLuserId))\r\n            dispatch(getMessages(URLuserId)) \r\n        }\r\n    }, [URLuserId])\r\n\r\n\r\n\r\n    const sendMessageOnClick = () => {\r\n        dispatch(sendMessage(URLuserId, newMessageText))\r\n    }\r\n\r\n    const onMessageChanged = (e) => {\r\n         let text = e.target.value;\r\n         dispatch(actions.updateMessageText(text));\r\n    }\r\n\r\n\r\n    \r\n\r\n    let dialogsElements = dialogs.map(dialog => <DialogItem  key={dialog.id} dialog={dialog}/>);\r\n    let messagesElements =  messages.map(m => <Message message={m} key={m.id}/> );\r\n \r\n\r\n    if (!isAuth) { return <Navigate to='/login'/> }\r\n    return (\r\n        <div className={styles.dialogsContent}>\r\n            <div>\r\n                {dialogsElements}\r\n            </div>\r\n            {URLuserId && <div>\r\n                {messagesElements}\r\n\r\n                <textarea onChange={(e) => onMessageChanged(e)} value={newMessageText}/>\r\n                <div className={styles.button}>\r\n                    <button onClick={()=>sendMessageOnClick() }> Send message </button>\r\n                </div>\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default Dialogs;"],"names":["DialogItem","dialog","to","id","className","styles","Avatar","width","photos","userName","hasNewMessages","dateConverter","date","day","split","month","Message","message","console","log","body","style","addedAt","viewed","color","getDialogsState","state","dialogsPage","dialogs","getMessagesState","messages","getNewMessageText","newMessageText","React","isAuth","useSelector","getIsAuth","URLuserId","useParams","dispatch","useDispatch","useEffect","getDialogs","getMessages","startDialog","dialogsElements","map","messagesElements","m","onChange","e","text","target","value","actions","onMessageChanged","onClick","sendMessage"],"sourceRoot":""}